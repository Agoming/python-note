#coding=utf-8

#字符串打印
s = "我爱学习"
print (s)

#转义字符
#用于打印一些不方便写出的内容 比如回车键等等
#在字符串中出现反斜杠就可能是转义字符的出现
#不同系统的换行操作不同  windows:\n   Linux:\r\n
#打印Let 's go

#方法1
s = "Let 's go"
print (s)

#方法2  让反斜杠后面的字符进行打印
ss = 'Let \'s go '
print (ss)

#打印斜杠 \\=\
sss = "c:\\user"
print (sss)

#回车换行符 window \n
ssss = "我爱\n学习"
print (ssss)


# 字符串的格式化

# 1.使用百分号(%)
# %d:在此处放置一个整数
# %s:表示此处应该放入一个字符串

# %s例子
s = "我爱%s"
print (s%"学习")
# %d例子
s = "我今年%d岁"
print (s%16)

# 注意：占位符有多少个就必须用多少个实际内容代替  或者一个也别代替 否则就会出错
# 例子
li = "我爱%s，我今年%d岁"
print (li)    #一个也不输入
# print (li%"学习")    #输入一个  错误
print (li%("学习",18))    #全部输入


# format函数格式化字符串
# 推荐使用这种方法  明了不会乱
# 使用{}和:来代替%号，最后使用format进行传参

# format例子
s = "我热爱着{}".format("学习，个屁捏")
print(s)

# 让format带有顺序化
# 在{}里面加入数字 代表后面format传参的顺序
s = "我热爱着{1}，{0}".format("个屁捏","学习")
print(s)

# None关键字
# 表示什么也没有  如果一个函数没有返回值，那么可以用none来进行代替
# 还有用来占位置和接触变量绑定
def get():
    None

# 表达式
# 由一个或者多个变量夹杂数字和运算符组合成的一行代码
# 通常会有一个返回值
   # 运算符
   # 用于运算的符号叫做运算符
   # 运算符分类
        # 算数运算符
        # 比较或者关系运算符
        # 赋值运算符
        # 逻辑运算符
        # 位运算符
        # 成员运算符
        # 身份运算符

# 算数运算符
# +，-如同算数一般
a = 3+6-3
print(a)

# 乘号用星号(*)代替
a =2*3
print(a)

# 除号使用斜杠(/)代替
# 并且python2和python3不同 这里以python3位准
a = 36/6
print(a)

# //表示取商运算，也叫地板除
a = 35//6
print(a)

# **表示幂运算 3的3次方
a = 3**3
print(a)

# 比较运算符
   # 对两个变量或者值进行比较的运算符
   # 比较的结果是布尔值 则是true是 或 false否
# == 等于号
a = 1
b = 2
c = a == b # 将a和b进行比较 c为存放比较的结果
print(c)

# !=不等于
c = a!=b # 同理上面进行比较之后把值赋给c
print(c)
# ==    等于 - 比较对象是否相等	(a == b) 返回 False。
# !=	不等于 - 比较两个对象是否不相等	(a != b) 返回 true.
# <>	不等于 - 比较两个对象是否不相等	(a <> b) 返回 true。这个运算符类似 != 。
# >	    大于 - 返回x是否大于y	(a > b) 返回 False。
# <	    小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。	(a < b) 返回 true。
# >=	大于等于	- 返回x是否大于等于y。	(a >= b) 返回 False。
# <=	小于等于 -	返回x是否小于等于y。

# 赋值运算符
# =  赋值
a = 0 # 对a进行赋值

c = a = 4 # 把4作为值赋给a 从而改变a  赋值是从右变得值赋值给左边的变量
print(c)

# += 缩写
a += 7 # a = a+7  因为上面赋值的原因所以a=4  所以 a = 4+7
print(a)

# 所有的算数运算符都可以缩写
# 比如 +=,-=,*=,/=,//=,%=,**= 都是缩写方式

# 逻辑运算符
   # 对布尔值进行计算的符号
   # and 逻辑与
   # or 逻辑或
   # not 逻辑非
   # python中没有逻辑异或运算
   # 运算规则:
       # and看做乘法，or看做加法
       # True看作1 ，False看作0
       # 则逻辑运算就能换转成整数数学运算
       # 最后结果如果是为0则为False ,否则为True
   # 逻辑运算的短路问题
       # 逻辑运算式，按照运算顺序计算，一旦能够确定整个式子未来的值，则不进行计算，直接返回返回值

# 逻辑运算案例
a = True
b = False
c = True
# 以下式子等价于 d = 1 * 0 + 1
d = a and b or c
print(d)# 所以d大于0为True

d = a or b and c # d = 1 + 0 * 1
print(d)

# 逻辑运算的短路案例
# 下面这个例子 d的值一定是为true 于是乎运行到or时候 整个表达式就不在向下计算
d = a or (132)# d = 1 + 一个我们随便定义的数字当时不能为负数的情况下 最小的当为0  0+1=1所以就会出现短路
print(d)

# 而有的时候逻辑运算表达式里面还有赋值表达式，所以赋值表达式的结果就很难预期
# 例子(伪代码=不一定能成功运行的东西)
# b=0
# d = a or (b=9) and 6 # d = 1 + 9 * 6  括号是为了让他先执行
# 假定上面的语法没有错误的情况下 b是等于9呢还是0呢
# print(b)

# 成员运算符号
  # 用来检测某一个变量是否是另一个变量的成员，或者说在一个成员里面对另一个成员的内容进行查找
  # in 和 not in进行判断
  # 语法 var1 in var2   var not in var2

# 例子
a = [1,23,4,5,5]
b = 6
print(b in a) # 不存在则返回False
c = 5
print(c in a) # 存在则返回True

# 身份运算
# is用来检测两个变量是否是同一个变量
# is not两个变量不是同一个变量
# 通过查看对象所在的内存地址来进行检测
# var1 is var2  var is not var2
# 有时候值相同 但是不一定是同一个变量
a = 1
b = 1
print( a is b)

a = "I love zhu"
b = "I love zhu"
print( a is b)

# 运算符的优先级问题
# 括号具有最高优先级
# 优先级表格
  # **  指数 (最高优先级)
  # ~ + -   按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
  # * / % //    乘，除，取模和取整除
  # + - 加法减法
  # >> <<   右移，左移运算符
  # &   位 'AND'
  # ^ | 位运算符
  # <= < > >=   比较运算符
  # <> == !=    等于运算符
  # = %= /= //= -= += *= **=    赋值运算符
  # is is not   身份运算符
  # in not in   成员运算符
  # not or and  逻辑运算符
